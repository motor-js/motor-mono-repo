{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getWaterMarkCanvas;\n\nfunction getWaterMarkCanvas(text, options) {\n  var canvas = document.createElement('canvas');\n  var ctx = canvas.getContext('2d');\n  var canvasWidth = 4000;\n  var canvasHeight = 4000;\n  canvas.width = canvasWidth;\n  canvas.height = canvasHeight;\n  ctx.textAlign = options.textAlign;\n  ctx.textBaseline = options.textBaseline;\n  ctx.globalAlpha = options.globalAlpha;\n  ctx.font = options.font;\n  ctx.translate(canvasWidth / 2, canvasHeight / 2);\n  ctx.rotate(options.rotateAngle);\n  ctx.translate(-canvasWidth / 2 * 1.2, -canvasHeight / 2 * 1.2);\n  ctx.fillStyle = options.fillStyle;\n  var waterMarkText = [];\n  var chunkWidth = options.chunkWidth;\n  var chunkHeight = options.chunkHeight;\n  var horizontalChunkCount = Math.ceil(canvasWidth / chunkWidth) + 1;\n  var verticalChunkCount = Math.ceil(canvasHeight / chunkHeight) + 1;\n\n  for (var j = 0, initY = chunkHeight / 2, indent = 0; j <= verticalChunkCount; j += 1) {\n    indent = parseInt(j % 2);\n\n    for (var i = 0, initX = chunkWidth / 2; i <= horizontalChunkCount; i += 1) {\n      waterMarkText.push({\n        text: text,\n        x: i * chunkWidth + indent * initX,\n        y: j * chunkHeight + initY\n      });\n    }\n  }\n\n  waterMarkText.forEach(function (item) {\n    ctx.fillText(item.text, item.x, item.y);\n  });\n  return ctx.canvas.toDataURL();\n}\n\nmodule.exports = exports['default'];","map":{"version":3,"sources":["../src/WaterMarkCanvas.js"],"names":["getWaterMarkCanvas","canvas","document","ctx","canvasWidth","canvasHeight","options","waterMarkText","chunkWidth","chunkHeight","horizontalChunkCount","Math","verticalChunkCount","j","initY","indent","parseInt","i","initX","text","x","y","item"],"mappings":";;;;;kBAAwBA,kB;;AAAT,SAAA,kBAAA,CAAA,IAAA,EAAA,OAAA,EAA2C;AACxD,MAAMC,MAAAA,GAASC,QAAAA,CAAAA,aAAAA,CAAf,QAAeA,CAAf;AACA,MAAMC,GAAAA,GAAMF,MAAAA,CAAAA,UAAAA,CAAZ,IAAYA,CAAZ;AACA,MAAMG,WAAAA,GAAN,IAAA;AACA,MAAMC,YAAAA,GAAN,IAAA;AACAJ,EAAAA,MAAAA,CAAAA,KAAAA,GAAAA,WAAAA;AACAA,EAAAA,MAAAA,CAAAA,MAAAA,GAAAA,YAAAA;AACAE,EAAAA,GAAAA,CAAAA,SAAAA,GAAgBG,OAAAA,CAAhBH,SAAAA;AACAA,EAAAA,GAAAA,CAAAA,YAAAA,GAAmBG,OAAAA,CAAnBH,YAAAA;AACAA,EAAAA,GAAAA,CAAAA,WAAAA,GAAkBG,OAAAA,CAAlBH,WAAAA;AACAA,EAAAA,GAAAA,CAAAA,IAAAA,GAAWG,OAAAA,CAAXH,IAAAA;AAEAA,EAAAA,GAAAA,CAAAA,SAAAA,CAAcC,WAAAA,GAAdD,CAAAA,EAA+BE,YAAAA,GAA/BF,CAAAA;AACAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAWG,OAAAA,CAAXH,WAAAA;AAEAA,EAAAA,GAAAA,CAAAA,SAAAA,CAAc,CAAA,WAAA,GAAA,CAAA,GAAdA,GAAAA,EAAsC,CAAA,YAAA,GAAA,CAAA,GAAtCA,GAAAA;AACAA,EAAAA,GAAAA,CAAAA,SAAAA,GAAgBG,OAAAA,CAAhBH,SAAAA;AAEA,MAAMI,aAAAA,GAAN,EAAA;AACA,MAAMC,UAAAA,GAAaF,OAAAA,CAAnB,UAAA;AACA,MAAMG,WAAAA,GAAcH,OAAAA,CAApB,WAAA;AACA,MAAMI,oBAAAA,GAAuBC,IAAAA,CAAAA,IAAAA,CAAUP,WAAAA,GAAVO,UAAAA,IAA7B,CAAA;AACA,MAAMC,kBAAAA,GAAqBD,IAAAA,CAAAA,IAAAA,CAAUN,YAAAA,GAAVM,WAAAA,IAA3B,CAAA;;AAEA,OAAK,IAAIE,CAAAA,GAAJ,CAAA,EAAWC,KAAAA,GAAQL,WAAAA,GAAnB,CAAA,EAAoCM,MAAAA,GAAzC,CAAA,EAAqDF,CAAAA,IAArD,kBAAA,EAA8EA,CAAAA,IAA9E,CAAA,EAAsF;AACpFE,IAAAA,MAAAA,GAASC,QAAAA,CAASH,CAAAA,GAAlBE,CAASC,CAATD;;AAEA,SAAK,IAAIE,CAAAA,GAAJ,CAAA,EAAWC,KAAAA,GAAQV,UAAAA,GAAxB,CAAA,EAAwCS,CAAAA,IAAxC,oBAAA,EAAmEA,CAAAA,IAAnE,CAAA,EAA2E;AACzEV,MAAAA,aAAAA,CAAAA,IAAAA,CAAmB;AACjBY,QAAAA,IAAAA,EADiB,IAAA;AAEjBC,QAAAA,CAAAA,EAAGH,CAAAA,GAAAA,UAAAA,GAAiBF,MAAAA,GAFH,KAAA;AAGjBM,QAAAA,CAAAA,EAAGR,CAAAA,GAAAA,WAAAA,GAAkBC;AAHJ,OAAnBP;AAKD;AACF;;AAEDA,EAAAA,aAAAA,CAAAA,OAAAA,CAAsB,UAAA,IAAA,EAAU;AAC9BJ,IAAAA,GAAAA,CAAAA,QAAAA,CAAamB,IAAAA,CAAbnB,IAAAA,EAAwBmB,IAAAA,CAAxBnB,CAAAA,EAAgCmB,IAAAA,CAAhCnB,CAAAA;AADFI,GAAAA;AAIA,SAAOJ,GAAAA,CAAAA,MAAAA,CAAP,SAAOA,EAAP;AACD","sourcesContent":["export default function getWaterMarkCanvas(text, options) {\n  const canvas = document.createElement('canvas')\n  const ctx = canvas.getContext('2d')\n  const canvasWidth = 4000\n  const canvasHeight = 4000\n  canvas.width = canvasWidth\n  canvas.height = canvasHeight\n  ctx.textAlign = options.textAlign\n  ctx.textBaseline = options.textBaseline\n  ctx.globalAlpha = options.globalAlpha\n  ctx.font = options.font\n\n  ctx.translate(canvasWidth / 2, canvasHeight / 2)\n  ctx.rotate(options.rotateAngle)\n\n  ctx.translate(-canvasWidth / 2 * 1.2, -canvasHeight / 2 * 1.2)\n  ctx.fillStyle = options.fillStyle\n\n  const waterMarkText = []\n  const chunkWidth = options.chunkWidth\n  const chunkHeight = options.chunkHeight\n  const horizontalChunkCount = Math.ceil(canvasWidth / chunkWidth) + 1\n  const verticalChunkCount = Math.ceil(canvasHeight / chunkHeight) + 1\n\n  for (let j = 0, initY = chunkHeight / 2, indent = 0; j <= verticalChunkCount; j += 1) {\n    indent = parseInt(j % 2)\n\n    for (let i = 0, initX = chunkWidth / 2; i <= horizontalChunkCount; i += 1) {\n      waterMarkText.push({\n        text,\n        x: i * chunkWidth + indent * initX,\n        y: j * chunkHeight + initY\n      })\n    }\n  }\n\n  waterMarkText.forEach((item) => {\n    ctx.fillText(item.text, item.x, item.y)\n  })\n\n  return ctx.canvas.toDataURL()\n}\n"]},"metadata":{},"sourceType":"script"}